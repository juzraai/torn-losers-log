export class TornAttack {
	/**
	 * @param {Object} data
	 * @param {Number} data.attacker_id
	 * @param {String} data.code Attack ID
	 * @param {Number} data.defender_id
	 * @param {String} data.result
	 * @param {Number} data.timestamp_ended
	 */
	constructor(data) {
		this.attacker_id = data.attacker_id;
		this.code = data.code;
		this.defender_id = data.defender_id;
		this.result = data.result;
		this.timestamp_ended = data.timestamp_ended;
		// API returns more fields, this is the subset that TLL uses
	}
};

export class TornAttackWithNames extends TornAttack {
	/**
		 * @param {Object} data
		 * @param {Number} data.attacker_id
		 * @param {String} data.attacker_name
		 * @param {String} data.code Attack ID
		 * @param {Number} data.defender_id
		 * @param {String} data.defender_name
		 * @param {String} data.result
		 * @param {Number} data.timestamp_ended
		 */
	constructor(data) {
		super(data);
		this.attacker_name = data.attacker_name;
		this.defender_name = data.defender_name;
	}
};

export class TLLAttack extends TornAttack {
	/**
	 * @param {Object} data
	 * @param {Number} data.attacker_id
	 * @param {String} data.code Attack ID
	 * @param {Number} data.defender_id
	 * @param {Boolean} data.paid
	 * @param {Number} data.price
	 * @param {String} data.result
	 * @param {Number} data.session Session ID generated by TLL. In a role+result filtered query, consecutive losses with same attacker, defender, paid, price values will be in the same session. Session ID is the lowest timestamp_ended value in the session.
	 * @param {Number} data.timestamp_ended
	 */
	constructor(data) {
		super(data);
		this.paid = data.paid;
		this.price = data.price;
		this.session = data.session;
	}
};
